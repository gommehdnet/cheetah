--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -71,6 +_,7 @@
     private net.minecraft.server.level.ServerPlayer player; // CraftBukkit
     public boolean iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation = false; // Paper - username validation overriding
     private int velocityLoginMessageId = -1; // Paper - Add Velocity IP Forwarding Support
+    private boolean disconnectLogged = false; // Cheetah - Allow skipping log messages for canceled login events
 
     public ServerLoginPacketListenerImpl(MinecraftServer server, Connection connection, boolean transferred) {
         this.server = server;
@@ -145,8 +_,15 @@
     }
 
     public void disconnect(Component reason) {
+        // Cheetah start - Allow skipping log messages for canceled login events
+        disconnect(reason, false);
+    }
+
+    public void disconnect(Component reason, boolean skipLog) {
         try {
-            LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            this.disconnectLogged = true;
+            if(!skipLog) LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            // Cheetah end
             this.connection.send(new ClientboundLoginDisconnectPacket(reason));
             this.connection.disconnect(reason);
         } catch (Exception var3) {
@@ -160,7 +_,7 @@
 
     @Override
     public void onDisconnect(DisconnectionDetails details) {
-        LOGGER.info("{} lost connection: {}", this.getUserName(), details.reason().getString());
+        if (!this.disconnectLogged) LOGGER.info("{} lost connection: {}", this.getUserName(), details.reason().getString()); // Cheetah - Allow skipping log messages for canceled login events
     }
 
     public String getUserName() {
@@ -361,12 +_,14 @@
         playerName = gameprofile.getName();
         uniqueId = gameprofile.getId();
         // Paper end - Add more fields to AsyncPlayerPreLoginEvent
+        boolean skipLog = asyncEvent.isSkipLog(); // Cheetah - Allow skipping log messages for canceled login events
 
         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
             final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
             if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
                 event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
             }
+            event.setSkipLog(skipLog); // Cheetah - Allow skipping log messages for canceled login events
             Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<>() {
                 @Override
                 protected PlayerPreLoginEvent.Result evaluate() {
@@ -377,11 +_,14 @@
 
             ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
             if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+                // Cheetah start - Allow skipping log messages for canceled login events
+                skipLog = event.isSkipLog();
+                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage()), skipLog); // Paper - Adventure
+                // Cheetah end
             }
         } else {
             if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
+                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage()), skipLog); // Cheetah - Allow skipping log messages for canceled login events // Paper - Adventure
             }
         }
         return gameprofile; // Paper - Add more fields to AsyncPlayerPreLoginEvent
