From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Summerfeeling <summerfeelingmc@gmail.com>
Date: Thu, 4 May 2023 12:08:13 +0200
Subject: [PATCH] Added VillagerGiveGiftToHeroEvent


diff --git a/src/main/java/org/bukkit/event/entity/VillagerGiveGiftToHeroEvent.java b/src/main/java/org/bukkit/event/entity/VillagerGiveGiftToHeroEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..077c58ae82151d52d68e5b9f07af955eea3df1cd
--- /dev/null
+++ b/src/main/java/org/bukkit/event/entity/VillagerGiveGiftToHeroEvent.java
@@ -0,0 +1,78 @@
+package org.bukkit.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Villager;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+/**
+ * Called when a {@link Villager} is about to drop gifts to a hero of the village.
+ *
+ * @author Summerfeeling
+ * @since 04.05.2023
+ */
+public class VillagerGiveGiftToHeroEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+
+    private LivingEntity recipient;
+    private List<ItemStack> itemStacks;
+
+    public VillagerGiveGiftToHeroEvent(@NotNull Entity what, @NotNull LivingEntity recipient, @NotNull List<ItemStack> itemStacks) {
+        super(what);
+
+        this.itemStacks = itemStacks;
+        this.recipient = recipient;
+    }
+
+    @NotNull
+    public Villager getVillager() {
+        return (Villager) getEntity();
+    }
+
+    @NotNull
+    public LivingEntity getRecipient() {
+        return recipient;
+    }
+
+    public void setRecipient(@NotNull LivingEntity recipient) {
+        this.recipient = recipient;
+    }
+
+    @NotNull
+    public List<ItemStack> getItemStacks() {
+        return itemStacks;
+    }
+
+    public void setItemStacks(@NotNull List<ItemStack> itemStacks) {
+        this.itemStacks = itemStacks;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}
