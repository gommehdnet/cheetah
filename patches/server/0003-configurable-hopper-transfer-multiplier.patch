From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lukas81298 <lukas81298@gommehd.net>
Date: Thu, 2 Dec 2021 13:46:26 +0100
Subject: [PATCH] configurable hopper transfer multiplier


diff --git a/src/main/java/net/minecraft/world/level/block/entity/Hopper.java b/src/main/java/net/minecraft/world/level/block/entity/Hopper.java
index a05acf709735b40ca86f978508c63a86065fd405..292895bf87538ae1474225d3df355918a88e79d4 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/Hopper.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/Hopper.java
@@ -19,4 +19,10 @@ public interface Hopper extends Container {
     double getLevelY();
 
     double getLevelZ();
+
+    // Cheetah start
+    default float getHopperTransferMultiplier() {
+        return 1.0F;
+    }
+    // Cheetah end
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 757edf74751dc7183454656fda9cecc4eb601e4c..ea068169c5b703ac81642230c59faacf1e8006b4 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -51,6 +51,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private NonNullList<ItemStack> items;
     private int cooldownTime;
     private long tickedGameTime;
+    private float hopperTransferMultiplier = 1.0F; // Cheetah
 
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -82,6 +83,16 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
     // CraftBukkit end
 
+    // Cheetah start
+    public float getHopperTransferMultiplier() {
+        return hopperTransferMultiplier;
+    }
+
+    public void setHopperTransferMultiplier( float hopperTransferMultiplier ) {
+        this.hopperTransferMultiplier = hopperTransferMultiplier;
+    }
+    // Cheetah end
+
     public HopperBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.HOPPER, pos, state);
         this.items = NonNullList.withSize(5, ItemStack.EMPTY);
@@ -97,6 +108,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
 
         this.cooldownTime = nbt.getInt("TransferCooldown");
+        // Cheetah start
+        if(nbt.contains("TransferMultiplier")) {
+            this.hopperTransferMultiplier = nbt.getFloat( "TransferMultiplier");
+        }
+        // Cheetah end
     }
 
     @Override
@@ -107,6 +123,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
 
         nbt.putInt("TransferCooldown", this.cooldownTime);
+        // Cheetah start
+        if(this.hopperTransferMultiplier != 1.0F) {
+            nbt.putFloat("TransferMultiplier", this.hopperTransferMultiplier);
+        }
+        // Cheetah end
     }
 
     @Override
@@ -249,7 +270,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                 ItemStack movedItem = origItemStack;
 
                 final int originalItemCount = origItemStack.getCount();
-                final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
+                final int movedItemCount = Math.min((int) (level.spigotConfig.hopperAmount * hopper.hopperTransferMultiplier), originalItemCount); // Cheetah - customizable hopper multiplier
                 origItemStack.setCount(movedItemCount);
 
                 // We only need to fire the event once to give protection plugins a chance to cancel this event
@@ -286,7 +307,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static boolean hopperPull(final Level level, final Hopper hopper, final Container container, ItemStack origItemStack, final int i) {
         ItemStack movedItem = origItemStack;
         final int originalItemCount = origItemStack.getCount();
-        final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
+        final int movedItemCount = Math.min((int) (level.spigotConfig.hopperAmount * hopper.getHopperTransferMultiplier()), originalItemCount); // Cheetah - customizable hopper transfer multiplier
         container.setChanged(); // original logic always marks source inv as changed even if no move happens.
         movedItem.setCount(movedItemCount);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
index d446f18df647484e2f05ab642b73e914b06fdfed..fc0f488a754f21dfe0464f712e70dcf2e72f7daa 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
@@ -34,4 +34,19 @@ public class CraftHopper extends CraftLootable<HopperBlockEntity> implements Hop
     public CraftHopper copy() {
         return new CraftHopper(this);
     }
+
+    // Cheetah start
+    @Override
+    public float getTransferMultiplier() {
+        return this.getTileEntity().getHopperTransferMultiplier();
+    }
+
+    @Override
+    public void setTransferMultiplier(float transferMultiplier) {
+        if(transferMultiplier < 0) {
+            throw new IllegalArgumentException("transferMultiplier cannot be negative for hopper at " + getLocation());
+        }
+        this.getTileEntity().setHopperTransferMultiplier(transferMultiplier);
+    }
+    // Cheetah end
 }
