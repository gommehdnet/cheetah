From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lukas81298 <lukas81298@gommehd.net>
Date: Wed, 5 Apr 2023 22:12:16 +0200
Subject: [PATCH] allow skipping log messages for canceled login events


diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 89b3184be952fd0803520dd0f717f3acfc3cb496..6e896d5ec133c7411cdb7be75ec101f754e84e1d 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -65,6 +65,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     private ServerPlayer player; // CraftBukkit
     public boolean iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation = false; // Paper - username validation overriding
     private int velocityLoginMessageId = -1; // Paper - Velocity support
+    private boolean disconnectLogged = false; // Cheetah
 
     public ServerLoginPacketListenerImpl(MinecraftServer server, Connection connection) {
         this.state = ServerLoginPacketListenerImpl.State.HELLO;
@@ -111,8 +112,13 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     }
 
     public void disconnect(Component reason) {
+        disconnect(reason, false);
+    }
+
+    public void disconnect(Component reason, boolean skipLog) { // Cheetah
         try {
-            ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            this.disconnectLogged = true; // Cheetah
+            if(!skipLog) ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString()); // Cheetah
             this.connection.send(new ClientboundLoginDisconnectPacket(reason));
             this.connection.disconnect(reason);
         } catch (Exception exception) {
@@ -127,7 +133,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     @Override
     public void onDisconnect(Component reason) {
-        ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString());
+        if (!disconnectLogged) ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString()); // Cheetah
     }
 
     public String getUserName() {
@@ -319,12 +325,14 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                         playerName = gameprofile.getName();
                         uniqueId = gameprofile.getId();
                         // Paper end
+                         boolean skipLog = asyncEvent.isSkipLog(); // Cheetah
 
                         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
                             final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
                             if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
                                 event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
                             }
+                            event.setSkipLog(skipLog);
                             Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
                                 @Override
                                 protected PlayerPreLoginEvent.Result evaluate() {
@@ -334,17 +342,18 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
                             ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
                             if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+                                skipLog = event.isSkipLog();
+                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage()), skipLog); // Paper - Adventure
                                 return;
                             }
                         } else {
                             if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
+                                ServerLoginPacketListenerImpl.this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage()), skipLog); // Paper - Adventure
                                 return;
                             }
                         }
                         // CraftBukkit end
-                        ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
+                        if (!skipLog) ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId()); // Cheetah
                         ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
         }
     }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index be6e2b07ad2bd66ac06be09ae3273b6ccb281423..a9f39866961843581040bde4cc695ad3c4dd8fa0 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -760,7 +760,7 @@ public abstract class PlayerList {
 
         this.cserver.getPluginManager().callEvent(event);
         if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
-            loginlistener.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+            loginlistener.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage()), event.isSkipLog()); // Paper - Adventure
             return null;
         }
         return entity;
